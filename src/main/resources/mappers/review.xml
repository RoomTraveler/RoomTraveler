<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.trip.review.ReviewDao">

    <!-- 결과 매핑 정의 -->
    <resultMap id="reviewResultMap" type="com.ssafy.trip.review.Review">
        <id property="reviewId" column="review_id" />
        <result property="accommodationId" column="accommodation_id" />
        <result property="userId" column="user_id" />
        <result property="reservationId" column="reservation_id" />
        <result property="rating" column="rating" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="stayDate" column="stay_date" />
        <result property="isVerified" column="is_verified" />
        <result property="status" column="status" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="username" column="username" />
        <result property="accommodationTitle" column="accommodation_title" />
        <result property="userProfileImage" column="user_profile_image" />
    </resultMap>

    <!-- 새 리뷰 추가 -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO reviews (accommodation_id, user_id, reservation_id, rating, title, content, stay_date, is_verified, status)
        VALUES (#{accommodationId}, #{userId}, #{reservationId}, #{rating}, #{title}, #{content}, #{stayDate}, #{isVerified}, #{status})
    </insert>

    <!-- 리뷰 ID로 리뷰 조회 -->
    <select id="selectById" resultMap="reviewResultMap">
        SELECT r.*, u.username, a.title as accommodation_title
        FROM reviews r
        LEFT JOIN users u ON r.user_id = u.user_id
        LEFT JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        WHERE r.review_id = #{reviewId}
    </select>

    <!-- 숙소 ID로 리뷰 목록 조회 -->
    <select id="selectByAccommodationId" resultMap="reviewResultMap">
        SELECT r.*, u.username, a.title as accommodation_title
        FROM reviews r
        LEFT JOIN users u ON r.user_id = u.user_id
        LEFT JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        WHERE r.accommodation_id = #{accommodationId}
        ORDER BY r.created_at DESC
    </select>

    <!-- 사용자 ID로 리뷰 목록 조회 -->
    <select id="selectByUserId" resultMap="reviewResultMap">
        SELECT r.*, u.username, a.title as accommodation_title
        FROM reviews r
        LEFT JOIN users u ON r.user_id = u.user_id
        LEFT JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        WHERE r.user_id = #{userId}
        ORDER BY r.created_at DESC
    </select>

    <!-- 숙소 ID로 리뷰 평균 평점 조회 -->
    <select id="selectAverageRatingByAccommodationId" resultType="Double">
        SELECT AVG(rating)
        FROM reviews
        WHERE accommodation_id = #{accommodationId} AND status = 'ACTIVE'
    </select>

    <!-- 숙소 ID로 리뷰 개수 조회 -->
    <select id="selectCountByAccommodationId" resultType="Integer">
        SELECT COUNT(*)
        FROM reviews
        WHERE accommodation_id = #{accommodationId} AND status = 'ACTIVE'
    </select>

    <!-- 리뷰 업데이트 -->
    <update id="update">
        UPDATE reviews
        SET rating = #{rating},
            title = #{title},
            content = #{content},
            updated_at = CURRENT_TIMESTAMP
        WHERE review_id = #{reviewId}
    </update>

    <!-- 리뷰 상태 업데이트 -->
    <update id="updateStatus">
        UPDATE reviews
        SET status = #{status},
            updated_at = CURRENT_TIMESTAMP
        WHERE review_id = #{reviewId}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="delete">
        DELETE FROM reviews
        WHERE review_id = #{reviewId}
    </delete>

    <!-- 숙소 ID로 리뷰 요약 정보 조회 -->
    <select id="selectReviewSummaryByAccommodationId" resultType="java.util.HashMap">
        SELECT 
            COUNT(*) as review_count,
            AVG(rating) as average_rating,
            SUM(CASE WHEN rating = 5 THEN 1 ELSE 0 END) as five_star_count,
            SUM(CASE WHEN rating = 4 THEN 1 ELSE 0 END) as four_star_count,
            SUM(CASE WHEN rating = 3 THEN 1 ELSE 0 END) as three_star_count,
            SUM(CASE WHEN rating = 2 THEN 1 ELSE 0 END) as two_star_count,
            SUM(CASE WHEN rating = 1 THEN 1 ELSE 0 END) as one_star_count
        FROM reviews
        WHERE accommodation_id = #{accommodationId} AND status = 'ACTIVE'
    </select>

    <!-- 최근 리뷰 목록 조회 -->
    <select id="selectRecentReviews" resultMap="reviewResultMap">
        SELECT r.*, u.username, a.title as accommodation_title
        FROM reviews r
        LEFT JOIN users u ON r.user_id = u.user_id
        LEFT JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        WHERE r.status = 'ACTIVE'
        ORDER BY r.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 평점별 리뷰 개수 조회 -->
    <select id="selectRatingDistributionByAccommodationId" resultType="java.util.HashMap">
        SELECT 
            rating,
            COUNT(*) as count
        FROM reviews
        WHERE accommodation_id = #{accommodationId} AND status = 'ACTIVE'
        GROUP BY rating
        ORDER BY rating DESC
    </select>

    <!-- 예약 ID로 리뷰 조회 -->
    <select id="selectByReservationId" resultMap="reviewResultMap">
        SELECT r.*, u.username, a.title as accommodation_title
        FROM reviews r
        LEFT JOIN users u ON r.user_id = u.user_id
        LEFT JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        WHERE r.reservation_id = #{reservationId}
    </select>

    <!-- 호스트 ID로 리뷰 목록 조회 -->
    <select id="selectByHostId" resultMap="reviewResultMap">
        SELECT r.*, u.username, a.title as accommodation_title
        FROM reviews r
        LEFT JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        LEFT JOIN users u ON r.user_id = u.user_id
        WHERE a.host_id = #{hostId}
        ORDER BY r.created_at DESC
    </select>

    <!-- 필터링된 리뷰 목록 조회 -->
    <select id="selectFilteredReviews" resultMap="reviewResultMap" parameterType="java.util.Map">
        SELECT r.*, u.username, a.title as accommodation_title
        FROM reviews r
        LEFT JOIN users u ON r.user_id = u.user_id
        LEFT JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        <where>
            <if test="accommodationId != null">
                AND r.accommodation_id = #{accommodationId}
            </if>
            <if test="userId != null">
                AND r.user_id = #{userId}
            </if>
            <if test="minRating != null">
                AND r.rating >= #{minRating}
            </if>
            <if test="maxRating != null">
                AND r.rating &lt;= #{maxRating}
            </if>
            <if test="startDate != null">
                AND r.created_at >= #{startDate}
            </if>
            <if test="endDate != null">
                AND r.created_at &lt;= #{endDate}
            </if>
            <if test="status != null">
                AND r.status = #{status}
            </if>
        </where>
        ORDER BY 
        <choose>
            <when test="sortBy != null and sortBy == 'rating'">
                r.rating
            </when>
            <when test="sortBy != null and sortBy == 'date'">
                r.created_at
            </when>
            <otherwise>
                r.created_at
            </otherwise>
        </choose>
        <choose>
            <when test="sortOrder != null and sortOrder == 'asc'">
                ASC
            </when>
            <otherwise>
                DESC
            </otherwise>
        </choose>
    </select>
</mapper>
