<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.trip.accommodation.dao.RoomDao">

    <!-- 새 객실을 등록합니다. -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="roomId">
        INSERT INTO rooms (
            accommodation_id, name, description, capacity, price_per_night, 
            room_type, bed_type, bathroom_count, amenities, status, created_at, updated_at
        )
        VALUES (
            #{accommodationId}, #{name}, #{description}, #{capacity}, #{pricePerNight}, 
            #{roomType}, #{bedType}, #{bathroomCount}, #{amenities}, #{status}, NOW(), NOW()
        )
    </insert>

    <!-- 객실 ID로 객실을 조회합니다. -->
    <select id="getRoomById" resultType="com.ssafy.trip.accommodation.model.Room">
        SELECT * FROM rooms WHERE room_id = #{roomId}
    </select>

    <!-- 숙소 ID로 객실 목록을 조회합니다. -->
    <select id="getRoomsByAccommodationId" resultType="com.ssafy.trip.accommodation.model.Room">
        SELECT * FROM rooms WHERE accommodation_id = #{accommodationId}
    </select>

    <!-- 숙소 ID와 날짜로 가용한 객실 목록을 조회합니다. -->
    <select id="getAvailableRooms" resultType="com.ssafy.trip.accommodation.model.Room">
        SELECT r.* FROM rooms r
        WHERE r.accommodation_id = #{accommodationId}
        AND r.status = 'ACTIVE'
        AND r.room_id NOT IN (
            SELECT ra.room_id FROM room_availability ra
            WHERE ra.date BETWEEN #{checkInDate} AND #{checkOutDate}
            AND ra.is_available = false
        )
    </select>

    <!-- 객실 정보를 업데이트합니다. -->
    <update id="updateRoom">
        UPDATE rooms
        SET 
            name = #{name},
            description = #{description},
            capacity = #{capacity},
            price_per_night = #{pricePerNight},
            room_type = #{roomType},
            bed_type = #{bedType},
            bathroom_count = #{bathroomCount},
            amenities = #{amenities},
            updated_at = NOW()
        WHERE room_id = #{roomId}
    </update>

    <!-- 객실 상태를 업데이트합니다. -->
    <update id="updateRoomStatus">
        UPDATE rooms
        SET status = #{status}, updated_at = NOW()
        WHERE room_id = #{roomId}
    </update>

    <!-- 객실을 삭제합니다. -->
    <delete id="deleteRoom">
        DELETE FROM rooms WHERE room_id = #{roomId}
    </delete>

    <!-- 필터링된 객실 목록을 조회합니다. -->
    <select id="getFilteredRooms" resultType="com.ssafy.trip.accommodation.model.Room">
        SELECT * FROM rooms
        <where>
            <if test="accommodationId != null">
                accommodation_id = #{accommodationId}
            </if>
            <if test="roomType != null">
                AND room_type = #{roomType}
            </if>
            <if test="minCapacity != null">
                AND capacity >= #{minCapacity}
            </if>
            <if test="maxPrice != null">
                AND price_per_night &lt;= #{maxPrice}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
    </select>

    <!-- 외부 API에서 가져온 객실 정보를 저장합니다. -->
    <insert id="insertFromApi" useGeneratedKeys="true" keyProperty="roomId">
        INSERT INTO rooms (
            accommodation_id, name, description, capacity, price_per_night, 
            room_type, bed_type, bathroom_count, amenities, status, created_at, updated_at
        )
        VALUES (
            #{accommodationId}, #{name}, #{description}, #{capacity}, #{pricePerNight}, 
            #{roomType}, #{bedType}, #{bathroomCount}, #{amenities}, #{status}, NOW(), NOW()
        )
    </insert>

    <!-- 호스트 ID로 객실 목록을 조회합니다. -->
    <select id="getRoomsByHostId" resultType="com.ssafy.trip.accommodation.model.Room">
        SELECT r.* FROM rooms r
        JOIN accommodations a ON r.accommodation_id = a.accommodation_id
        WHERE a.host_id = #{hostId}
    </select>
</mapper>